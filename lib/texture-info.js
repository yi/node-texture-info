// Generated by CoffeeScript 1.6.3
(function() {
  var SGF_FILE_SIGNATURE, SGF_SERIALISED_BA_SIGNATURE, bytearray, fs, gm, logger, readAniInfoFromSGFFormat, _;

  fs = require('fs');

  gm = require('gm');

  bytearray = require("bytearray");

  logger = require('dev-logger');

  _ = require("underscore");

  SGF_FILE_SIGNATURE = "SGF-asset";

  SGF_SERIALISED_BA_SIGNATURE = 50807718;

  readAniInfoFromSGFFormat = function(pathToImgFile, callback) {
    return fs.readFile(pathToImgFile, function(err, buf) {
      var amfLen, assetFrameNum, canvasHeight, canvasWidth, regPointX, regPointY, signature;
      if (err != null) {
        err = "fail to read file, error:" + err;
        callback(err);
        return;
      }
      signature = bytearray.readUTFBytes(buf, SGF_FILE_SIGNATURE.length, buf.length - SGF_FILE_SIGNATURE.length);
      logger.log("[texture-info::readAniInfoFromSGFFormat] signature:" + signature);
      if (signature !== SGF_FILE_SIGNATURE) {
        err = "verification failed";
        logger.log("[texture-info::readAniInfoFromSGFFormat] " + err);
        callback();
        return;
      }
      buf.position = buf.position - 4 - SGF_FILE_SIGNATURE.length;
      amfLen = bytearray.readUnsignedInt(buf);
      buf.position = buf.position - 4 - amfLen;
      canvasWidth = bytearray.readUnsignedShort(buf);
      canvasHeight = bytearray.readUnsignedShort(buf);
      regPointX = bytearray.readShort(buf);
      regPointY = bytearray.readShort(buf);
      assetFrameNum = bytearray.readUnsignedShort(buf);
      return logger.log("[texture-info::readAniInfoFromSGFFormat] amfLen:" + amfLen + ", canvasWidth:" + canvasWidth + ", canvasHeight:" + canvasHeight + ", regPointX:" + regPointX + ", regPointY:" + regPointY);
    });
  };

  exports.check = function(pathToImgFile, callback) {
    if (!fs.existsSync(pathToImgFile)) {
      throw new Error("missing file at " + pathToImgFile);
    }
    if (!_.isFunction(callback)) {
      throw new Error("missing file callback");
    }
    gm(pathToImgFile).identify(function(err, imgInfo) {
      if (err != null) {
        err = "fail to identify image, error:" + err;
        callback(err);
      } else {
        console.dir(imgInfo);
        switch (imgInfo.format) {
          case 'PNG':
            return readAniInfoFromSGFFormat(pathToImgFile, function(err, sgfInfo) {
              if (err != null) {
                err = "fail to read sgf info, error:" + err;
                return callback(err);
              } else {
                if (sgfInfo != null) {
                  sgfInfo["sourceImage"] = imgInfo;
                }
                return callback(null, sgfInfo != null ? sgfInfo : imgInfo);
              }
            });
          default:
            return imgInfo;
        }
      }
    });
  };

}).call(this);
